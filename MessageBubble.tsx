import React from 'react';
import { ChatMessage, Sender, ModelType } from '../types';
import { MODEL_B1_LABEL_BN, MODEL_B2_LABEL_BN, HEADER_TITLE_BN, LOGO_URL } from '../constants';

interface MessageBubbleProps {
  message: ChatMessage;
}

const MessageBubble: React.FC<MessageBubbleProps> = ({ message }) => {
  const isUser = message.sender === Sender.User;
  
  const bubbleClasses = isUser
    ? 'bg-[var(--main-color)] text-[var(--text-on-main)] self-end rounded-t-xl rounded-bl-xl'
    : 'bg-[var(--dark-element)] text-[var(--text-on-dark)] self-start rounded-t-xl rounded-br-xl';
  
  const formattedTime = message.timestamp.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit', hour12: true });

  const renderText = (text: string) => {
    // Enhanced regex for code blocks (```lang\ncode``` or ```\ncode```)
    const codeBlockRegex = /```(\w*)\n([\s\S]*?)\n```/g;
    const parts = [];
    let lastIndex = 0;
    let match;

    while ((match = codeBlockRegex.exec(text)) !== null) {
      // Add text before the code block
      if (match.index > lastIndex) {
        parts.push(formatInlineMarkdown(text.substring(lastIndex, match.index)));
      }
      // Add the code block
      const language = match[1] || 'plaintext'; // Default to plaintext if no language specified
      const code = match[2];
      parts.push(
        <pre key={`code-${match.index}`} className="bg-gray-900 p-2 my-1 rounded-md overflow-x-auto text-sm font-mono text-gray-200">
          <code className={`language-${language}`}>{code.trim()}</code>
        </pre>
      );
      lastIndex = codeBlockRegex.lastIndex;
    }

    // Add any remaining text after the last code block
    if (lastIndex < text.length) {
      parts.push(formatInlineMarkdown(text.substring(lastIndex)));
    }
    
    return parts.map((part, index) => <React.Fragment key={index}>{part}</React.Fragment>);
  };

  const formatInlineMarkdown = (inlineText: string) => {
    // Replace markdown-style bold, italics, and strikethrough
    let formattedText = inlineText
      .replace(/\*\*\*(.*?)\*\*\*/g, '<strong><em>$1</em></strong>') // Bold + Italics
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')       // Bold
      .replace(/\*(.*?)\*/g, '<em>$1</em>')                 // Italics
      .replace(/~~(.*?)~~/g, '<del>$1</del>');              // Strikethrough
      
    // Handle newlines
    return formattedText.split('\n').map((line, index, arr) => (
      <React.Fragment key={index}>
        <span dangerouslySetInnerHTML={{ __html: line }} />
        {index < arr.length - 1 && <br />}
      </React.Fragment>
    ));
  };
  
  const modelUsedLabel = message.modelUsed === ModelType.B2_CODING ? MODEL_B2_LABEL_BN : MODEL_B1_LABEL_BN;

  return (
    <div className={`flex w-full ${isUser ? 'justify-end' : 'justify-start'}`}>
      <div className={`flex flex-col ${isUser ? 'items-end' : 'items-start'} max-w-[90%] sm:max-w-[80%]`}>
        <div className={`flex items-end ${isUser ? 'flex-row-reverse' : 'flex-row'}`}>
          {!isUser && (
            <img 
              src={LOGO_URL} 
              alt="AI Avatar" 
              className="w-6 h-6 sm:w-7 sm:h-7 rounded-full mr-2 mb-1 self-start" // Align with top of bubble
            />
          )}
           {isUser && (
             // Placeholder for user avatar if you add it later
             // <div className="w-6 h-6 sm:w-7 sm:h-7 rounded-full ml-2 mb-1 bg-gray-500 self-start"></div>
           )}
          <div
            className={`p-2.5 sm:p-3 shadow-md ${bubbleClasses} break-words`}
            role="log"
            aria-live={message.sender === Sender.AI ? "polite" : "off"}
          >
            {message.imageUrl && (
              <img 
                src={message.imageUrl} 
                alt="User upload" 
                className="max-w-xs max-h-64 my-2 rounded-lg" 
              />
            )}
            {message.generatedImage && (
              <img 
                src={`data:image/jpeg;base64,${message.generatedImage}`}
                alt="Generated by AI" 
                className="max-w-full my-2 rounded-lg" 
              />
            )}
            {message.text ? (
                <div className="whitespace-pre-wrap text-sm sm:text-base">{renderText(message.text)}</div>
            ) : (message.sender === Sender.AI && !message.generatedImage && "...")}
          </div>
        </div>
        <span className={`text-xs mt-1 ${isUser ? 'mr-1' : 'ml-8 sm:ml-9'} text-gray-400`}> 
          {isUser ? 'আপনি' : `${HEADER_TITLE_BN} (${modelUsedLabel})`} - {formattedTime}
        </span>
      </div>
    </div>
  );
};

export default MessageBubble;
